<snippet>
	<content><![CDATA[<?php

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

namespace SIGA\\${1:NameSpace}\V1\Api\Controllers;

use Zend\Stdlib\ArrayObject;
use SIGA\Core\ControllerAbstract;
use Psr\Http\Message\RequestInterface as Resq;
use Psr\Http\Message\ResponseInterface as Resp;

/**
 * Description of ${2:Name}Controller
 *
 * @author caltj
 */
class ${2}Controller extends ControllerAbstract {

    protected \$table = \SIGA\\${1}\V1\Tables\\${2}Table::class;
    protected \$TableModel = \SIGA\\${1}\V1\Api\Models\\${2}::class;
    protected \$model = \SIGA\\${1}\V1\Models\\${2}::class;
    protected \$TemplatePath = "${1}/views";
    protected \$template = '${3:template}';
    protected \$route = '${4:route}';

    public function listar(Resq \$req, Resp \$resp) {
        \$params = \$req->getParams();
        \$this->getModel()->getTableModel();
        if (\$this->TableModel):
            //Se for usar o filtro por empresa descomentar essa linha
            ${5://}\$this->model->offsetSet('empresa', \$this->session->get('restrito', 'default'));
            //se for usar a leitura em blocos descomente essa linha
             //O arquivo ex:${6:lista}.phtml vai ficar na pasta da views junto com a index e a edit
             ${7://}\$this->view->setTemplatePathCuston(sprintf("%s/%s/${6}", \$this->TemplatePath, \$this->template));
            \$this->getTable();
            if (\$this->table):
               \$this->Data = \$this->table->setTableModel(\$this->TableModel)->setModel(\$this->model)->getSelect(\$params);
               \$object = new ArrayObject(\$params);
                \$this->TableModel->setSource(\$this->Data)
                        ->setAdapter(\$this->adapter)
                        ->setView(\$this->view)
                        ->setParamAdapter(\$object);
                //se for usar a leitura em blocos use essa linha DESCOMNENTE
                ${7}return \$this->TableModel->render(\$this->route,'newDataTableJson');
                //se for usar a leitura em tabela use essa linha  DESCOMNENTE
                ${8://}return \$this->TableModel->render(\$this->route);
            endif;
        endif;
        return parent::notFound(\$req, \$resp);
    }
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>call-api-controller</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
